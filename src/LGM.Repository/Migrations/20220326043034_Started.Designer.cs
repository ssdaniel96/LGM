// <auto-generated />
using System;
using LGM.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LGM.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220326043034_Started")]
    partial class Started
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LGM.Domain.Entities.Books.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TotalChapters")
                        .HasColumnType("int");

                    b.Property<int>("TotalPages")
                        .HasColumnType("int");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Books", "book");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Groups.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Groups", "group");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Groups.SourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SourceTypes", "group");
                });

            modelBuilder.Entity("LGM.Domain.Entities.People.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Members", "people");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Readings.Progression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Chapter")
                        .HasColumnType("int");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int>("Paragraph")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Progressions", "reading");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Readings.ReadingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ProgressionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProgressionId")
                        .IsUnique();

                    b.ToTable("ReadingPlans", "reading");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Readings.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Chapter")
                        .HasColumnType("int");

                    b.Property<int>("KickOffMemberId")
                        .HasColumnType("int");

                    b.Property<int>("PageNumber")
                        .HasColumnType("int");

                    b.Property<int>("Paragraph")
                        .HasColumnType("int");

                    b.Property<int>("PrayerMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ReadingPlanId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleMemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KickOffMemberId");

                    b.HasIndex("PrayerMemberId");

                    b.HasIndex("ReadingPlanId");

                    b.HasIndex("ResponsibleMemberId");

                    b.ToTable("Reminders", "reading");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Books.Book", b =>
                {
                    b.HasOne("LGM.Domain.Entities.Groups.Group", "Group")
                        .WithMany("Books")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Groups.Group", b =>
                {
                    b.OwnsOne("LGM.Domain.ValueObjects.Groups.GroupIdentity", "GroupIdentity", b1 =>
                        {
                            b1.Property<int>("GroupId")
                                .HasColumnType("int");

                            b1.Property<string>("SourceId")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("SourceTypeId")
                                .HasColumnType("int");

                            b1.HasKey("GroupId");

                            b1.ToTable("Groups", "group");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.Navigation("GroupIdentity")
                        .IsRequired();
                });

            modelBuilder.Entity("LGM.Domain.Entities.People.Member", b =>
                {
                    b.HasOne("LGM.Domain.Entities.Groups.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Readings.ReadingPlan", b =>
                {
                    b.HasOne("LGM.Domain.Entities.Books.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LGM.Domain.Entities.Groups.Group", "Group")
                        .WithMany("ReadingPlans")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LGM.Domain.Entities.Readings.Progression", "Progression")
                        .WithOne("ReadingPlan")
                        .HasForeignKey("LGM.Domain.Entities.Readings.ReadingPlan", "ProgressionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Group");

                    b.Navigation("Progression");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Readings.Reminder", b =>
                {
                    b.HasOne("LGM.Domain.Entities.People.Member", "KickOf")
                        .WithMany()
                        .HasForeignKey("KickOffMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LGM.Domain.Entities.People.Member", "Prayer")
                        .WithMany()
                        .HasForeignKey("PrayerMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LGM.Domain.Entities.Readings.ReadingPlan", null)
                        .WithMany("Reminders")
                        .HasForeignKey("ReadingPlanId");

                    b.HasOne("LGM.Domain.Entities.People.Member", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KickOf");

                    b.Navigation("Prayer");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Groups.Group", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Members");

                    b.Navigation("ReadingPlans");
                });

            modelBuilder.Entity("LGM.Domain.Entities.Readings.Progression", b =>
                {
                    b.Navigation("ReadingPlan")
                        .IsRequired();
                });

            modelBuilder.Entity("LGM.Domain.Entities.Readings.ReadingPlan", b =>
                {
                    b.Navigation("Reminders");
                });
#pragma warning restore 612, 618
        }
    }
}
